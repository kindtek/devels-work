version: "3.9"
name: devels-play-ubuntu
services:

  initialize:
    # Need a user priviliged enough to chown
    build:
      context: .
      target: dplay_init
    init: true
    command:
      - bin/bash
      - -c
      - export _GBL=${_GBL:-gbl}
      - export _HALOS=${_HALOS:-halos}
      - ln -s /home/${_GBL:-gbl} /tmp/${_GBL:-gbl}
      - ln -s /home/dvl /tmp/dvl
      - mkdir -p /mnt/data
      - ln -s /mnt/data /tmp/data
    # command: echo something

  chown-hal:
    # Need a user priviliged enough to chown
    user: ${_GBL:-gbl}
    # Specify the wings in question
    group_add:
      - ${_HALOS:-halos}
    build:
      context: .
      target: dplay_hal
    depends_on:
      initialize:
        # Wait for the groups to be added
        condition: service_completed_successfully
    init: true
    volumes:
      - hal-data:/tmp/${_GBL:-gbl}
    command: sudo chown -R ${_GBL:-gbl}:${_HALOS:-halos} /tmp/${_GBL:-gbl}

  chown-hel:
    # Need a user priviliged enough to chown
    user: dvl
    # Specify the wings in question
    group_add:
      - horns
    build:
      context: .
      target: dplay_hel
    depends_on:
      initialize:
        # Wait for groups to be added
        condition: service_completed_successfully
    init: true
    volumes:
      - hel-data:/tmp/dvl
    command: chown -R dvl:horns /tmp/dvl

  data:
    user: ${_GBL:-gbl}
    group_add:
      - ${_HALOS:-halos}
    build:
      context: .
      target: dplay_data
    depends_on:
      chown-hel:
        # Wait for the ownership to change
        condition: service_completed_successfully
      chown-hal:
        # Wait for the ownership to change
        condition: service_completed_successfully
    init: true
    volumes:
      - mnt-data:/tmp/data
      - type: bind
        source: /run/dbus/system_bus_socket
        target: /run/dbus/system_bus_socket
    # command: 
    #   - chown -R ${_GBL:-gbl}:${_HALOS:-halos} /tmp/data

  skel:
    extends: data
    # Need a user priviliged enough to chown
    user: ${_GBL:-gbl}
    # image: kindtek/dplay:ubuntu-skel
    build:
      context: .
      target: dplay_skel
      args:
        - _GBL=${_GBL:-gbl}
        - _HALOS=${_HALOS:-halos}
      # network: ${COMPOSE_PROJECT_NAME}_default
    init: true
    volumes:
      - hel-data:/home/dvl
      - hal-data:/home/${_GBL:-gbl}
      - mnt-data:/mnt/data
    depends_on:
      data:
        # Wait for the ownership to change
        condition: service_completed_successfully
    labels:
      com.dplay_skel.description: "skeleton"

  git:
    # owner/group becomes owner of hel-data volume
    extends: data
    user: dvl
    privileged: true
    entrypoint:
      - sleep
      - infinity
    image: kindtek/dplay:ubuntu-git
    # extends: skel
    build:
      context: .
      target: dplay_git
      args:
        - _GBL=${_GBL:-gbl}
    depends_on:
      chown-hel:
        # Wait for the ownership to change
        condition: service_completed_successfully
      chown-hal:
        # Wait for the ownership to change
        condition: service_completed_successfully
      data:
        # Wait for the ownership to change
        condition: service_completed_successfully
    volumes:
      - hel-data:/home/dvl
      - hal-data:/home/${_GBL:-gbl}
      - /mnt/data
    labels:
      com.devels-play.description: "basics + git"

  python:
    extends: git
    image: kindtek/dplay:ubuntu-py
    build:
      context: .
      target: dplay_msdot
    labels:
      com.devels-play.description: "basics + git + powerhell"

  msdot:
    extends: python
    image: kindtek/dplay:ubuntu-msdot
    build:
      context: .
      target: dplay_msdot
    labels:
      com.devels-play.description: "basics + git + powerhell"

  dind:
    extends: msdot
    image: kindtek/dplay:ubuntu-dind
    build:
      context: .
      target: dplay_dind
    labels:
      com.devels-play.description: "basics + git + powerhell + docker"

  kernel:
    extends: dind
    image: kindtek/dplay:ubuntu-kernel
    build:
      context: .
      target: dplay_kernel
    labels:
      com.devels-play.description: "basics + git + powerhell + docker + kernel"

  gui:
    extends: dind
    image: kindtek/dplay:ubuntu-gui
    build:
      context: .
      target: dplay_gui
      args:
        - _GBL=${_GBL:-gbl}
    labels:
      com.devels-play.description: "basics + git + powerhell + docker + kernel + gui"
  # cuda:
  #   extends: gui
  #   image: kindtek/dplay:ubuntu-cuda
  #   build:
  #     context: .
  #     target: dplay_cuda
  #     args:
  #       - _GBL=${_GBL:-gbl}
  #     labels:
  #       com.dplay_cuda.description: "basics + git + powerhell + docker + gui + cuda"

volumes:
  hel-data:
  hal-data:
  mnt-data:


networks:
  "${COMPOSE_PROJECT_NAME}_default":
    driver: overlay
    attachable: true
  #     volumes:
  #       - type: bind
  #         source: home-vol
  #         target: /home
  #       - type: bind
  #         source: usr-vol
  #         target: /usr

  #     volumes:
  #       - bin-vol:/mnt/root_fs/bin
  #       - boot-vol:/mnt/root_fs/boot
  #       - dev-vol:/mnt/root_fs/dev
  #       - etc-vol:/mnt/root_fs/etc
  #       - hal-vol:/mnt/root_fs/hal
  #       - hel-vol:/mnt/root_fs/hel
  #       - home-vol:/mnt/root_fs/home
  #       - lib-vol:/mnt/root_fs/lib
  #       - lib32-vol:/mnt/root_fs/lib32
  #       - lib64-vol:/mnt/root_fs/lib64
  #       - libx32-vol:/mnt/root_fs/libx32
  #       - media-vol:/mnt/root_fs/media
  #       - mnt-vol:/mnt/root_fs/mnt
  #       - opt-vol:/mnt/root_fs/opt
  #       - proc-vol:/mnt/root_fs/proc
  #       - root-vol:/mnt/root_fs/root
  #       - run-vol:/mnt/root_fs/run
  #       - sbin-vol:/mnt/root_fs/sbin
  #       - srv-vol:/mnt/root_fs/srv
  #       - sys-vol:/mnt/root_fs/sys
  #       - tmp-vol:/mnt/root_fs/tmp
  #       - usr-vol:/mnt/root_fs/usr
  #       - var-vol:/mnt/root_fs/var
  # volumes:
  #   bin-vol:
  #   boot-vol:
  #   dev-vol:
  #   etc-vol:
  #   hal-vol:
  #   hel-vol:
  #   home-vol:
  #   lib-vol:
  #   lib32-vol:
  #   lib64-vol:
  #   libx32-vol:
  #   media-vol:
  #   mnt-vol:
  #   opt-vol:
  #   proc-vol:
  #   root-vol:
  #   run-vol:
  #   sbin-vol:
  #   srv-vol:
  #   sys-vol:
  #   tmp-vol:
  #   usr-vol:
  #   var-vol:



